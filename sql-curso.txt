-RDM = Relational Database Management System.
--Software que nos ayuda a manejar nuestra BD. Ej: MySQL, Postgres, etc.
--Nos Facilitan la conección con los lenguajes de programación (php, python, js, etc).

-El CRUD (Create, Read, Update, Delete) son las operaciones que se pueden realizar con los RDM.

---------------------------------------------------------------------------------------------------------------------------------------

Relaciones en BD Relacional: se trata del enlace que puede haber en dos (o más) tablas  donde la clave principal 
de una se asocia con la clave externa de otra utilizando las relaciones de la base de datos.
Las relaciones se representan con un rombo, dentro se utiliza normalmente un verbo que une a ambas tablas.

|       |       -----       |      |    TIENE sería la relación.
| DUEÑO | >---< TIENE >---< | AUTO |    DUEÑO y AUTO son las entidades.
|       |       -----       |      |    

ENTIDAD: representación de algo de la vida real. Estas se grafican con un cuadrado/rectangulo.
Las entidades poseen ATRIBUTOS, estos son las características de estas. Se reprentan con ovalos.
Los atributos que poseen otros atributos se denominan compuestos.

Entidad Fuerte: puede existir por si solo.
Entidad Débil: no pueden existir sin una entidad fuerte. Se representan con un cuadro pero con doble linea.
Cada una de ellas tendrá su propia primary key.
Ejemplo: Entidad Fuerte -> Libro - 1
         Entidad Débil  -> Ejemplar - 3
         En una biblioteca no se puede tener un ejemplar sin tener el libro del mismo.
         Del libro 1 habrá 3 ejemplares
Las entidades débiles y fuertes se relacionan a través de las Foreign Key.

DIAGRAMA ER (ENTIDAD-RELACIÓN):

Cuando un atributo esta graficado con:
-Doble ovalo: es un atributo multivaluado (puede haber más de un mismo atributo).
-Subrayado: primary key.
-Intervalos de lineas: los atributos derivados se calculan o derivan de otro atributo, 
                       por ejemplo, la edad se calcula a partir de la fecha de nacimiento.


La cardinalidad es una restricción en una relación que especifica el número de instancias 
de entidad que una específica puede estar relacionada.

-Las tres clasificaciones de cardinalidad son: uno a uno, uno a muchos y muchos a muchos o muchos a uno.
--Uno a Uno: Una entidad del conjunto de entidades A puede asociarse con a lo sumo una entidad del conjunto de entidades B y viceversa.
    Se representa:

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | -|---< TIENE >---|- | AUTO | , o también, | DUEÑO | -||---< TIENE >---||- | AUTO |
|       |        -----        |      |              |       |         -----         |      |

--Cero a Uno (algunos la denominan como 1 a 1 opcional): cuando esta la posibilidad que uno de los lados no esté.
    Se representa igual que el de 1 a 1 pero con las lineas punteadas.

--Uno a muchos (1 a N): Una entidad del conjunto de entidades A puede asociarse con más de una entidad del conjunto de entidades B, sin embargo, una entidad del conjunto de entidades B puede asociarse con, como máximo,a una entidad.
    Se reprentan:

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | -|---< TIENE >---<- | AUTO | , o también, | DUEÑO | -||---< TIENE >---|<- | AUTO | , el |< significa que puede haber 1 o muchos.
|       |        -----        |      |              |       |         -----         |      |

--Muchos a muchos (N a N): Cuando en una tabla A puede estar conectado con muchos de la tabla B, y viceversa.

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | ->---< TIENE >---<- | AUTO | , o también, | DUEÑO | ->|---< TIENE >---|<- | AUTO |
|       |        -----        |      |              |       |         -----         |      |

---------------------------------------------------------------------------------------------------------------------------------------

-Las Columnas ID (las columnas que tengas las id's de los registros), se le dicen Primary Key. 
-Cuando en la tabla B hay una columna con la Id de registros de A (para relacionar ambas tablas), estas id se le 
denomina Foreign Key.

-Tipos de datos:
    Texto: CHAR(n), VARCHAR(n), TEXT.
    Números: Integer(INT), BIGINT, SMALLINT (99 o menos), DECIMAL(n, s), NUMERIC(n, s).
    Fecha/Hora: DATE(YYYY-MM-DD), TIME(hh:mm:ss), DATETIME(YYYY-MM-DD hh:mm:ss), TIMESTAMP.
    Lógicos: BOOLEAN (true y false).
-CONSTRAINT (restricciones):
    NOT NULL, UNIQUE, PRIMARY KEY (not null + unique), Foreign KEY, CHECK (debe cumplir una condición dada),
    DEFAULT, INDEX (conviene solo si sabemos que se usarán los datos más veces de lo que se agregan nuevos).

---------------------------------------------------------------------------------------------------------------------------------------

NORMALIZACIÓN:
-Reglas para normalizar (separar los datos para hallar las entidades):

--Primera forma normal (1FN): Atributos atómicos (sin campos repetidos).
    En una tabla existen dos o más columnas que conceptualmente son lo mismo (col_rep_1, col_rep_2, ... , col_rep_n),
    se normaliza al unificar las columnas en una sola. 
    Ej: en una tabla de alumnos que cursan varias materias, cada materia es una columna. Al normalizar se deja solo una columna
    llamada materia, y por cada una que tenga el alumno se hará una fila con dicha materia.

--Segunda forma normal (2FN): Cumple 1FN y cada campo debe depender de una primary key (clave única). Separar las entidades que son independientes.
    En el ejemplo anterior, para que dependa de solo una clave, crearemos otra tabla pero especificamente para materias.
    Luego por cada materia que tenga cada alumno se creará un registro (fila) con su clave propia. También tenrdrá una 
    columna para la id del alumno (Foreign Key) para conectarlo a la tabla original.

--Tercera forma normal (3FN): Cumple 1FN, 2FN y los campos que no son clave no deben tener dependencias.
    Separar aún más la tabla, para crear las entidades que las componen como tablas individuales.

--Cuarta forma normal (4FN): Cumple las anteriores y los campos multivaluados se identifican por una clave única.
    Se crean las tablas necesarias para evitar las relaciones de N a N. Tendrán solamente la relación entre las otras tablas.

---------------------------------------------------------------------------------------------------------------------------------------

DDL = Data Definition Language.
- Create: Crear.
- Alter: Editar/Alterar.
- Drop: Eliminar/Borrar.

Una vista es una tabla virtual cuyo contenido está definido por una consulta. Al igual que una tabla, 
una vista consta de un conjunto de columnas y filas de datos con un nombre. Sin embargo, a menos que esté indizada,
una vista no existe como conjunto de valores de datos almacenados en una base de datos.
Las vistas existen para visualizar los datos de una consulta en la base de datos.

DML trata del contenido de la base de datos. Son las siglas de Data Manipulation Language y sus comandos son:
- Insert: Inserta o agrega nuevos registros a la tabla.
- Update: Actualiza o modifica los datos que ya existen.
- Delete: Esta sentencia es riesgosa porque puede borrar el contenido de una tabla.
- Select: Trae información de la base de datos.

DELETE /= DROP
Con delete borramos el contenido de la tabla, el drop elimina la tabla (o bd).

---------------------------------------------------------------------------------------------------------------------------------------

-SQL -> Relacional. Se representan con tablas (columnas y filas). Usadas para almacenar datos organizados. Estas tablas se relacionan entre sí
a partir de keys.

-NoSQL -> No Relacional. Son representados de diferentes formas (key-value, json, etc). Usados para almacenar datos que no requieren relacionarse,
básicamente serían como un cajón donde solo se guardan los  datos y no se necesitan un orden. Son más flexibles, escalables y mayor rendimiento que 
las relacionales (esto se debe a que las relacionales pesan más debido a las diferentes tablas que puede llegar a haber).

SQL = Structured Query Language
-Columna ID: el id es un número único generado automaticamente (autoincremental) para cada dato que se agrega a la tabla de datos, 
es un identificador para el dato. Nos sirve para relacionar tablas.
-Fila = Registro.

-QUERY = Consulta / Petición -> Son aquellos 'pedidos' de datos realizados en los lenguajes hacia los RDM para hacer
las operaciones queridas.
Las consultas en una base de datos juegan un papel muy fundamental, puesto que facilitan de manera considerable los procesos en cualquier empresa.
Estructura de una query básica: 
    SELECT `columnas, funciones como COUNT, SUM, MAX, MIN o ¨*¨´ FROM `table´
    WHERE `condicion´
    GROUP BY `columna que se necesite agrupar´
    ORDER BY `columna que se tenga que ordenar´ DESC/ASC
    HAVING `condicion´ 


Sentencia JOIN: Unificar tablas, a través de las claves foráneas.
    Tenemos la tabla A y B. Su intersección es la conexión realizada por la Foreign Key.
    LEFT JOIN -> A - B: trae todos los datos de A y la intersección con B.
    RIGHT JOIN -> A - B: trae todos los datos de B y la intersección con A.
    INNER JOIN -> A - B: trae los datos de la intersección.
 
UNION: unificar ambas tablas, la suma.

-ETL: La palabra ETL correspondería al acrónimo de: Extract (Extraer), Transform (Transformar), Load (Cargar).
ETL hace parte del proceso de integración de datos, mas aun es un componente muy importante que completa el resultado final en la relación
de aplicaciones y sistemas.

---------------------------------------------------------------------------------------------------------------------------------------
>>>>>>> 3f03eb1fd15981bebe9ed0fe4e74540c6a1a728f
