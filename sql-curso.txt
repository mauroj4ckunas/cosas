-RDM = Relational Database Management System.
--Software que nos ayuda a manejar nuestra BD. Ej: MySQL, Postgres, etc.
--Nos Facilitan la conección con los lenguajes de programación (php, python, js, etc).

-El CRUD (Create, Read, Update, Delete) son las operaciones que se pueden realizar con los RDM.

---------------------------------------------------------------------------------------------------------------------------------------

Relaciones en BD Relacional: se trata del enlace que puede haber en dos (o más) tablas  donde la clave principal 
de una se asocia con la clave externa de otra utilizando las relaciones de la base de datos.
Las relaciones se representan con un rombo, dentro se utiliza normalmente un verbo que une a ambas tablas.

|       |       -----       |      |    TIENE sería la relación.
| DUEÑO | >---< TIENE >---< | AUTO |    DUEÑO y AUTO son las entidades.
|       |       -----       |      |    

ENTIDAD: representación de algo de la vida real. Estas se grafican con un cuadrado/rectangulo.
Las entidades poseen ATRIBUTOS, estos son las características de estas. Se reprentan con ovalos.
Los atributos que poseen otros atributos se denominan compuestos.

Entidad Fuerte: puede existir por si solo.
Entidad Débil: no pueden existir sin una entidad fuerte. Se representan con un cuadro pero con doble linea.
Cada una de ellas tendrá su propia primary key.
Ejemplo: Entidad Fuerte -> Libro - 1
         Entidad Débil  -> Ejemplar - 3
         En una biblioteca no se puede tener un ejemplar sin tener el libro del mismo.
         Del libro 1 habrá 3 ejemplares
Las entidades débiles y fuertes se relacionan a través de las Foreign Key.

DIAGRAMA ER (ENTIDAD-RELACIÓN):

Cuando un atributo esta graficado con:
-Doble ovalo: es un atributo multivaluado (puede haber más de un mismo atributo).
-Subrayado: primary key.
-Intervalos de lineas: los atributos derivados se calculan o derivan de otro atributo, 
                       por ejemplo, la edad se calcula a partir de la fecha de nacimiento.


La cardinalidad es una restricción en una relación que especifica el número de instancias 
de entidad que una específica puede estar relacionada.

-Las tres clasificaciones de cardinalidad son: uno a uno, uno a muchos y muchos a muchos o muchos a uno.
--Uno a Uno: Una entidad del conjunto de entidades A puede asociarse con a lo sumo una entidad del conjunto de entidades B y viceversa.
    Se representa:

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | -|---< TIENE >---|- | AUTO | , o también, | DUEÑO | -||---< TIENE >---||- | AUTO |
|       |        -----        |      |              |       |         -----         |      |

--Cero a Uno (algunos la denominan como 1 a 1 opcional): cuando esta la posibilidad que uno de los lados no esté.
    Se representa igual que el de 1 a 1 pero con las lineas punteadas.

--Uno a muchos (1 a N): Una entidad del conjunto de entidades A puede asociarse con más de una entidad del conjunto de entidades B, sin embargo, una entidad del conjunto de entidades B puede asociarse con, como máximo,a una entidad.
    Se reprentan:

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | -|---< TIENE >---<- | AUTO | , o también, | DUEÑO | -||---< TIENE >---|<- | AUTO | , el |< significa que puede haber 1 o muchos.
|       |        -----        |      |              |       |         -----         |      |

--Muchos a muchos (N a N): Cuando en una tabla A puede estar conectado con muchos de la tabla B, y viceversa.

|       |        -----        |      |              |       |         -----         |      |
| DUEÑO | ->---< TIENE >---<- | AUTO | , o también, | DUEÑO | ->|---< TIENE >---|<- | AUTO |
|       |        -----        |      |              |       |         -----         |      |

---------------------------------------------------------------------------------------------------------------------------------------

-Las Columnas ID (las columnas que tengas las id's de los registros), se le dicen Primary Key. 
-Cuando en la tabla B hay una columna con la Id de registros de A (para relacionar ambas tablas), estas id se le 
denomina Foreign Key.

-Tipos de datos:
    Texto: CHAR(n), VARCHAR(n), TEXT.
    Números: Integer(INT), BIGINT, SMALLINT (99 o menos), DECIMAL(n, s), NUMERIC(n, s).
    Fecha/Hora: DATE(YYYY-MM-DD), TIME(hh:mm:ss), DATETIME(YYYY-MM-DD hh:mm:ss), TIMESTAMP.
    Lógicos: BOOLEAN (true y false).
-CONSTRAINT (restricciones):
    NOT NULL, UNIQUE, PRIMARY KEY (not null + unique), Foreign KEY, CHECK (debe cumplir una condición dada),
    DEFAULT, INDEX (conviene solo si sabemos que se usarán los datos más veces de lo que se agregan nuevos).

---------------------------------------------------------------------------------------------------------------------------------------

NORMALIZACIÓN:
-Reglas para normalizar (separar los datos para hallar las entidades):

--Primera forma normal (1FN): Atributos atómicos (sin campos repetidos).
    En una tabla existen dos o más columnas que conceptualmente son lo mismo (col_rep_1, col_rep_2, ... , col_rep_n),
    se normaliza al unificar las columnas en una sola. 
    Ej: en una tabla de alumnos que cursan varias materias, cada materia es una columna. Al normalizar se deja solo una columna
    llamada materia, y por cada una que tenga el alumno se hará una fila con dicha materia.

--Segunda forma normal (2FN): Cumple 1FN y cada campo debe depender de una primary key (clave única). Separar las entidades que son independientes.
    En el ejemplo anterior, para que dependa de solo una clave, crearemos otra tabla pero especificamente para materias.
    Luego por cada materia que tenga cada alumno se creará un registro (fila) con su clave propia. También tenrdrá una 
    columna para la id del alumno (Foreign Key) para conectarlo a la tabla original.

--Tercera forma normal (3FN): Cumple 1FN, 2FN y los campos que no son clave no deben tener dependencias.
    Separar aún más la tabla, para crear las entidades que las componen como tablas individuales.

--Cuarta forma normal (4FN): Cumple las anteriores y los campos multivaluados se identifican por una clave única.
    Se crean las tablas necesarias para evitar las relaciones de N a N. Tendrán solamente la relación entre las otras tablas.

---------------------------------------------------------------------------------------------------------------------------------------

DDL = Data Definition Language.
- Create: Crear.
- Alter: Editar/Alterar.
- Drop: Eliminar/Borrar.

Una vista es una tabla virtual cuyo contenido está definido por una consulta. Al igual que una tabla, 
una vista consta de un conjunto de columnas y filas de datos con un nombre.
Las vistas existen para visualizar los datos de una consulta en la base de datos.

DML trata del contenido de la base de datos. Son las siglas de Data Manipulation Language y sus comandos son:
- Insert: Inserta o agrega nuevos registros a la tabla.
- Update: Actualiza o modifica los datos que ya existen.
    UPDATE nombre-de-la-tabla
    SET nombre-de-la-columna = valor[, nombre-de-la-columna=valor]
    [WHERE condición]
- Delete: Esta sentencia es riesgosa porque puede borrar el contenido de una tabla.
- Select: Trae información de la base de datos.

DELETE /= DROP
Con delete borramos el contenido de la tabla, el drop elimina la tabla (o bd).

---------------------------------------------------------------------------------------------------------------------------------------

-SQL -> Relacional. Se representan con tablas (columnas y filas). Usadas para almacenar datos organizados. Estas tablas se relacionan entre sí
a partir de keys.

SQL = Structured Query Language
-Columna ID: el id es un número único generado automaticamente (autoincremental) para cada dato que se agrega a la tabla de datos, 
es un identificador para el dato. Nos sirve para relacionar tablas.
-Fila = Registro.

-QUERY = Consulta / Petición -> Son aquellos 'pedidos' de datos realizados en los lenguajes hacia los RDM para hacer
las operaciones queridas.
Las consultas en una base de datos juegan un papel muy fundamental, puesto que facilitan de manera considerable los procesos en cualquier empresa.
Estructura de una query básica: 
    SELECT `columnas, funciones como COUNT, SUM, MAX, MIN o ¨*¨´ 
    FROM `table´
    WHERE `condicion´
    GROUP BY `columna que se necesite agrupar´
    ORDER BY `columna que se tenga que ordenar´ DESC/ASC
    HAVING `condicion´ 

    SELECT: Lo que quieres mostrar
    FROM: De dónde voy a tomar los datos
    WHERE: Los filtros de los datos que quieres mostrar
    GROUP BY: Los rubros por los que me interesa agrupar la información
    ORDER BY: El orden en que quiero presentar mi información
    HAVING: Los filtros que quiero que mis datos agrupados tengan


Querys anidados: cuidado con estas consultas porque pueden llegar a ser O(n**2)
    SELECT * FROM (SELECT * FROM `tabla´ ...) as `nombre´
    ...; 

    ... = cualquier otra función de sql.

Sentencia JOIN: Unificar tablas, a través de las claves foráneas.
    Tenemos la tabla A y B. Su intersección es la conexión realizada por la Foreign Key.
    LEFT JOIN -> A - B: trae todos los datos de A y la intersección con B.
    RIGHT JOIN -> A - B: trae todos los datos de B y la intersección con A.
    INNER JOIN -> A - B: trae los datos de la intersección.
    
    SELECT `columnas de A y B´
    FROM A
    `INNER, LEFT o RIGHT´ JOIN B ON A.id = B.id

UNION: unificar ambas tablas, la suma.

Valores Nulos y No Nulos:
    NULL representa un espacio de la tabla de datos donde no hay un dato, es el vacío.
    Con WHERE se verifica si un espacio está vacío o no así:
        WHERE `columna´ IS NULL -> con esta sentencia nos trae los registros vacíos.
        WHERE `columna´ IS NOT NULL -> con esta sentencia nos trae los registros no vacíos.

-ETL: La palabra ETL correspondería al acrónimo de: Extract (Extraer), Transform (Transformar), Load (Cargar).
ETL hace parte del proceso de integración de datos, mas aun es un componente muy importante que completa el resultado final en la relación
de aplicaciones y sistemas.

---------------------------------------------------------------------------------------------------------------------------------------

Base de datos distribuidas:
    Es una colección de multiples db separadas físicamente que se comunican mediante una red informática.
    Ej: tener servidores en diferentes países pero que esten conectadas por una red de base de datos.

    Homogeneas: cada base de datos comparten el sistema. 
        Ej: tenemos dos db, ambas con MySql y desde Windows.

    Heterogenea: las base de datos estan en diferentes sistemas.
        Ej: diferentes RDMS o están en Postgres pero una en Windows y otra desde Postgres.
    
VENTAJAS:

-desarrollo modular.
-incrementa la confiabilidad.
-mejora el rendimiento.
-mayor disponibilidad.
-rapidez de respuesta.

DESVENTAJAS:

-Manejo de seguridad.
-complejidad de procesamiento.
-Integridad de datos más compleja.
-Costo.

TIPOS:

Homogéneas: mismo tipo de BD, manejador y sistema operativo. (aunque esté distribuida).
Heterogénea: puede que varíen alguna de los anteriores características.
-OS
-Sistema de bases de datos.
-Modelo de datos.

ARQUITECTURAS:
-** cliente- servidor**: donde hay una BD principal y tiene varias BD que sirven como clientes o como esclavas que tratarán de obtener datos de la principal, a la que normalmente se hacen las escrituras.

Par a par (peer 2 peer): donde todos los puntos en la red de bd son iguales y se hablan como iguales sin tener que responder a una sola entidad.
multi manejador de bases de datos.
ESTRATEGIA DE DISEÑO:

top down: es cuando planeas muy bien la BD y la vas configurando de arriba hacia abajo de acuerdo a tus necesidades.
bottom up: ya existe esa BD y tratas de construir encima.
ALMACENAMIENTO DISTRIBUIDO:

-Fragmentación: qué datos van en dónde.

fragmentación horizontal: (sharding) partir la tabla que estás utilizando en diferentes pedazos horizontales.

fragmentación vertical: cuando parto por columnas.

fragmentación mixta: cuando tienes algunas columnas y algunos datos en un lugar y algunas columnas y algunas tuplas en otro lugar.

-Replicación: tienes los mismos datos en todas ala BBDD no importa donde estén.

-replicación completa: cuando toda al BD está en varias versiones a lo largo del globo, toda la información está igualita en todas las instancias de BD.
-replicación parcial: cuando algunos datos están replicados y compartidos en varias zonas geográficas
-sin replicación: no estás replicando nada de los datos, cada uno está completamente separa y no tienen que estarse hablando para sincronizar datos entre ellas.

DISTRIBUCIÓN DE DATOS:

-Distribución: cómo va a pasar la data entre una BD y otra. Tiene que ver mucho con networking, tiempos, latencia, etc. Pueden ser:

Centralizada: cuando la distribuyes des un punto central a todas las demás
Particionada: está partida en cada una de las diversas zonas geográficas y se comparten información entre ellas.
Replicada: tener la misma información en todas y entre ellas se hablan para siempre tener la misma versión.

---------------------------------------------------------------------------------------------------------------------------------------

Sharding: Es un tipo de partición horizontal para nuestras bases de datos. Divide las tuplas de nuestras tablas en diferentes ubicaciones de acuerdo a ciertos criterios de modo que para hacer consultas, las tendremos que dirigir al shard o parte que corresponda.

Cuándo usar:
-Cuando tenemos grandes volúmenes de información estática que representa un problema para obtener solo unas cuantas tuplas en consultas frecuentes.

Inconvenientes
-Cuando debamos hacer joins frecuentemente entre shards
-Baja elasticidad. Los shards crecen de forma irregular unos más que otros y vuelve a ser necesario usar sharding (subsharding)
-La llave primaria pierde utilidad

---------------------------------------------------------------------------------------------------------------------------------------

PRINCIPALES FUNCIONES:
- ROW_NUMBER(): nos da el numero de la tupla que estamos utilizando en ese momento.
- OVER([PARTITION BY column] [ORDER BY column DIR]): nos deja Particionar y Ordenar la window function.
- PARTITION BY(column/s): es un group by para la window function, se coloca dentro de OVER.
- FIRST_VALUE(column): devuelve el primer valor de una serie de datos.
- LAST_VALUE(column): Devuelve el ultimo valor de una serie de datos.
- NTH_VALUE(column, row_number): Recibe la columna y el numero de row que queremos devolver de una serie de datos
- RANK(): nos dice el lugar que ocupa de acuerdo a el orden de cada tupla, deja gaps entre los valores.
- DENSE_RANK(): Es un rango mas denso que trata de eliminar los gaps que nos deja RANK.
- PERCENT_RANK(): Categoriza de acuerdo a lugar que ocupa igual que los anteriores pero por porcentajes.

---------------------------------------------------------------------------------------------------------------------------------------

GROUP BY: agrupar una tabla con una condición.
    SELECT `columna a agrupar´, [COUNT(*), MAX(*), AVG(*), etc] AS `nombre cualquiera´ FROM `datatable´
    GROUP BY `columna a agrupar´;

    COUNT: cantidad de registros,
    MAX, MIN: el maximo y minimo (respectivamente), de los registros en una columna (tipo numéricos),
    AVG: el promedio de una columna.
    SUM: trae la suma de una columna.

    Se puede agrupar por más criterios, si no se puede por el primero, se hace por el segundo.
    También se puede agregar el WHERE.

ORDER BY: ordena las columnas según el criterio que se use.
    ASC sirve para ordenar de forma ascendente.
    DESC sirve para ordenar de forma descendente.
    LIMIT se usa para limitar la cantidad de resultados que arroja el query.

    SELECT `columnas´ FROM `datatable´
    ORDER BY `columna a ordenar´ [ASC o DESC]
    LIMIT `cantidad a traer´;

    También se puede ordenar por más criterios, se ordena por el primero luego el segundo y así.

---------------------------------------------------------------------------------------------------------------------------------------
Postgres: 
-- :: representa a la función CAST
-- comodin = _ 
-La diferencia entre MAX y LIMIT: Limit usa la tabla entera y con max lo podemos separar en subsets.
-Enlos rangos hay que especificar el valor min, max y el delta.
-Querys la latencia no es despreciable.
-Los self join tiene mas de una limitante
-Diferencia simetrica, elementos que no pertenecen a ambas tablas.

---------------------------------------------------------------------------------------------------------------------------------------

SQL SERVER: 
- En los datos tipo date: MM-DD-AA, el mes iría primero.
- Al crear una tabla, si queremos tener una clave primaria y una foranea debemos usar el comando:
    CONSTRAINT pk_id PRIMARY KEY (id)
    CONSTRAINT fk_grupoId PRIMARY KEY (grupoId)
- El DISTINC va después del SELECT y sirve para seleccionar a las columnas pero sin repeticiones.
- Si usamos la función MAX, MIN o SUM junto a GROUP BY, podemos traer los maximos, los minimos y la suma de las columnas especificadas.
    SELECT 'columna1', MAX('columna2') FROM 'tabla' 
    Aca nos trae la columna1 pero solamente con los maximos segun columna2.
- AVG sirven para el promedio de una columna de numeros
- COUNT sirve para contar los registros. Si se especifica un WHERE se puede contar la cantidad de cierto dato que querramos.
- HAVING trabaja con un GROUP BY porque filtra según registros agrupados. Tambien se podrá usar funciones como COUNT().
-% el caracter comodin se utiliza mucho en la sentencia LIKE para buscar los digitos puestos. El comodin sirve para que la funcion
no busque la palabra literal escrita sino que ademas busque si algun registro posee esa palabra.